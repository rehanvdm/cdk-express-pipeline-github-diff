{
  "version": 3,
  "sources": ["../src/main.ts", "../src/diff.ts", "../src/output.ts", "../src/index.ts"],
  "sourcesContent": ["import * as core from '@actions/core';\nimport * as github from '@actions/github';\n//@ts-expect-error TS/JS import issue but works\nimport { PullRequestEvent } from '@octokit/webhooks-definitions/schema';\nimport { generateDiffs, generateMarkdown, getSavedDiffs, saveDiffs } from './diff.js';\nimport { DiffMethod, ExpandStackSelection, StackSelectionStrategy, Toolkit } from '@aws-cdk/toolkit-lib';\nimport path from 'node:path';\nimport fs from 'node:fs';\nimport { updateGithubPrDescription } from './output.js';\nimport { CdkExpressPipelineAssembly } from 'cdk-express-pipeline';\n\nexport async function run(): Promise<void> {\n  try {\n    const mode = core.getInput('mode', { required: true });\n    if (mode !== 'generate' && mode !== 'print') {\n      core.setFailed(`Invalid mode '${mode}' specified. Valid modes are 'generate' or 'print'.`);\n      return;\n    }\n\n    const cloudAssemblyDirectory = core.getInput('cloud-assembly-directory', { required: true });\n\n    if (mode === 'generate') await generate(cloudAssemblyDirectory);\n    else if (mode === 'print') await print(cloudAssemblyDirectory);\n\n    // // Check if cloud assembly directory exists\n    // if (!fs.existsSync(cloudAssemblyDirectory)) {\n    //   core.setFailed(`Cloud assembly directory '${cloudAssemblyDirectory}' does not exist`);\n    //   return;\n    // }\n    //\n    //   // Load the CDK Express Pipeline Assembly\n    //   const assembly = new CdkExpressPipelineAssembly(cloudAssemblyDirectory);\n    //\n    //   // Generate diffs for all stacks\n    //   const templateDiffs = assembly.templateDiffs;\n    //   const diffResult = generateDiffs(templateDiffs);\n    //\n    //   if (!diffResult) {\n    //     core.info('No changes detected in any stacks');\n    //     return;\n    //   }\n    //\n    //   // Save diffs to filesystem\n    //   saveDiffs(diffResult, process.cwd());\n    //\n    //   // Generate markdown from the diffs\n    //   const markdown = generateMarkdown(assembly, diffResult);\n    //\n    //   // Update the GitHub PR description\n    //   await updateGithubPrDescription(markdown);\n\n    core.info('Successfully updated PR description with CDK Express Pipeline diff');\n  } catch (error) {\n    if (error instanceof Error) core.setFailed(error.message);\n  }\n}\n\nasync function generate(cloudAssemblyDirectory: string) {\n  const cdkToolkit = new Toolkit();\n  const cx = await cdkToolkit.fromAssemblyDirectory(cloudAssemblyDirectory);\n\n  const stackSelectors = core.getInput('stack-selectors', { required: true });\n  const patterns = stackSelectors\n    .split(',')\n    .map((s) => s.trim())\n    .filter((s) => s.length > 0);\n\n  const templateDiffs = await cdkToolkit.diff(cx, {\n    method: DiffMethod.ChangeSet(),\n    stacks: {\n      strategy: StackSelectionStrategy.PATTERN_MUST_MATCH,\n      patterns: patterns,\n      expand: ExpandStackSelection.NONE,\n      failOnEmpty: false\n    }\n  });\n\n  const stackDiffs = generateDiffs(templateDiffs);\n  if (!stackDiffs) {\n    core.info('No changes detected in any stacks');\n    return;\n  }\n\n  saveDiffs(stackDiffs, cloudAssemblyDirectory);\n  core.info('Successfully generated CDK Express Pipeline diffs');\n}\n\nasync function print(cloudAssemblyDirectory: string) {\n  const githubToken = core.getInput('github-token', { required: true });\n  let owner = core.getInput('owner');\n  let repo = core.getInput('repo');\n  let pullNumber = parseInt(core.getInput('pull-number'));\n  let gitHash = core.getInput('git-hash');\n\n  if (github.context.eventName === 'pull_request') {\n    const pushPayload = github.context.payload as PullRequestEvent;\n    if (!owner) owner = pushPayload.repository.owner.login;\n    if (!repo) repo = pushPayload.repository.name;\n    if (!pullNumber) pullNumber = pushPayload.pull_request.number;\n    if (!gitHash) gitHash = pushPayload.pull_request.head.sha;\n  }\n\n  const allStackDiffs = getSavedDiffs(cloudAssemblyDirectory);\n  const shortHandOrder: CdkExpressPipelineAssembly = JSON.parse(\n    fs.readFileSync(path.join(cloudAssemblyDirectory, 'cdk-express-pipeline.json'), 'utf-8')\n  );\n  const markdown = generateMarkdown(shortHandOrder, allStackDiffs);\n\n  const result = await updateGithubPrDescription(owner, repo, pullNumber, githubToken, markdown, gitHash);\n  core.info(result);\n  await core.summary.addRaw(result).write({ overwrite: true });\n}\n", "import { ResourceDifference, type TemplateDiff } from '@aws-cdk/cloudformation-diff';\nimport * as fs from 'node:fs';\nimport { CdkExpressPipelineAssembly } from 'cdk-express-pipeline';\n\nexport type DiffOptions = {\n  /**\n   * The stack selectors to use for the diff operation.\n   */\n  stackSelectors: string[];\n};\nexport type DiffResult = {\n  stacks: Record<string, StackDiff>;\n};\nexport type StackDiff = {\n  summary: {\n    additions: number;\n    removals: number;\n    updates: number;\n  };\n  markdown: string;\n};\n\nexport function generateDiffs(templateDiffs: { [name: string]: TemplateDiff }): DiffResult | undefined {\n  if (Object.keys(templateDiffs).length === 0) {\n    return undefined;\n  }\n  const result: DiffResult = { stacks: {} };\n  for (const [name, templateDiff] of Object.entries(templateDiffs)) {\n    result.stacks[name] = generateStackDiff(templateDiff);\n  }\n\n  return result;\n}\n\nexport function saveDiffs(diffResult: DiffResult, outputDir: string): void {\n  if (Object.keys(diffResult.stacks).length === 0) {\n    return;\n  }\n  for (const [stackNameId, stackDiff] of Object.entries(diffResult.stacks)) {\n    if (!fs.existsSync(`${outputDir}/cdk-express-pipeline/diffs`)) {\n      fs.mkdirSync(`${outputDir}/cdk-express-pipeline/diffs`, { recursive: true });\n    }\n    const filePath = `${outputDir}/cdk-express-pipeline/diffs/${stackNameId}.json`;\n    fs.writeFileSync(filePath, JSON.stringify(stackDiff, null, 2));\n  }\n}\n\nexport function getSavedDiffs(outputDir: string) {\n  const combinedDiff: DiffResult = { stacks: {} };\n  const files = fs.readdirSync(`${outputDir}/cdk-express-pipeline/diffs`);\n  for (const file of files) {\n    const stackId = file.replace('.json', '');\n    const stackDiff = JSON.parse(fs.readFileSync(`${outputDir}/cdk-express-pipeline/diffs/${file}`, 'utf-8'));\n    combinedDiff.stacks[stackId] = stackDiff;\n  }\n  return combinedDiff;\n}\n\nexport function generateMarkdown(order: CdkExpressPipelineAssembly, diffResult: DiffResult) {\n  let markdown = `---\\n`;\n  markdown += '```diff\\n';\n\n  order.waves.forEach((wave) => {\n    markdown += `\uD83C\uDF0A ${wave.waveId}\\n`;\n    wave.stages.forEach((stage) => {\n      markdown += `  \uD83C\uDFD7 ${stage.stageId}\\n`;\n      stage.stacks.forEach((stack) => {\n        const stackDiff = diffResult.stacks[stack.stackId]; // + ' (' + stack.stackName + ')'\n        if (stackDiff) {\n          markdown += `    \uD83D\uDCE6 ${stack.stackName} (${stack.stackId})\\n`;\n          if (stackDiff.markdown) {\n            markdown += `${stackDiff.markdown}\\n`;\n          }\n        }\n      });\n    });\n  });\n  markdown += '```\\n';\n\n  return markdown;\n}\n\nfunction generateStackDiff(templateDiff: TemplateDiff): StackDiff {\n  const stackDiff: StackDiff = {\n    summary: {\n      additions: 0,\n      removals: 0,\n      updates: 0\n    },\n    markdown: ''\n  };\n  const changes: string[] = [];\n\n  templateDiff.resources.forEachDifference((logicalId: string, change: ResourceDifference) => {\n    if (ignoreResource(change)) {\n      return;\n    }\n\n    if (change.isUpdate) {\n      stackDiff.summary.updates++;\n      const replacementIndicator = change.changeImpact === 'WILL_REPLACE' ? ' [\uD83D\uDCA5 REPLACEMENT]' : '';\n      changes.push(\n        `!       [~] ${change.oldValue?.Type || change.newValue?.Type} ${logicalId} ${logicalId}${replacementIndicator}`\n      );\n\n      Object.entries(change.propertyUpdates).forEach(([propertyPath, propertyChange]) => {\n        if (propertyChange.isAddition) {\n          changes.push(`!         \u2514\u2500 [+] ${propertyPath}`);\n          changes.push(`!             \u2514\u2500 [+] ${JSON.stringify(propertyChange.newValue)}`);\n        } else if (propertyChange.isRemoval) {\n          changes.push(`!         \u2514\u2500 [-] ${propertyPath}`);\n          changes.push(`!             \u2514\u2500 [-] ${JSON.stringify(propertyChange.oldValue)}`);\n        } else if (propertyChange.isUpdate) {\n          changes.push(`!         \u2514\u2500 [~] ${propertyPath}`);\n          changes.push(`!             \u251C\u2500 [-] ${JSON.stringify(propertyChange.oldValue)}`);\n          changes.push(`!             \u2514\u2500 [+] ${JSON.stringify(propertyChange.newValue)}`);\n        }\n      });\n    } else if (change.isAddition) {\n      stackDiff.summary.additions++;\n      changes.push(`+       [+] ${change.newValue?.Type} ${logicalId} ${logicalId}`);\n    } else if (change.isRemoval) {\n      stackDiff.summary.removals++;\n      changes.push(`-       [-] ${change.oldValue?.Type} ${logicalId} ${logicalId}`);\n    }\n  });\n\n  if (changes.length > 0) {\n    stackDiff.markdown = changes.join('\\n');\n  }\n  return stackDiff;\n}\n\n//TODO: Let pass in more later\nfunction ignoreResource(change: ResourceDifference): boolean {\n  const resourceType = change.oldValue?.Type ?? change.newValue?.Type;\n  switch (resourceType) {\n    case 'AWS::CDK::Metadata':\n      return true;\n    case 'AWS::Lambda::Function': {\n      const keys = Object.keys(change.propertyUpdates);\n      if ((keys.length <= 2 && keys.includes('Code')) || keys.includes('Metadata')) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n", "import { Octokit } from '@octokit/core';\nimport { restEndpointMethods } from '@octokit/plugin-rest-endpoint-methods';\n\nconst MAX_DESCRIPTION_LENGTH = 262145;\n\nexport async function updateGithubPrDescription(\n  owner: string,\n  repo: string,\n  pullNumber: number,\n  ghToken: string,\n  markdown: string,\n  gitHash: string\n) {\n  const MyOctokit = Octokit.plugin(restEndpointMethods);\n  const octokit = new MyOctokit({ auth: ghToken });\n\n  // Get current timestamp\n  const now = new Date().toISOString();\n\n  const marker = '<!-- CDK_EXPRESS_PIPELINE_DIFF_MARKER -->';\n  const newContent = `${marker}\n---\n> DO NOT MAKE CHANGES BELOW THIS LINE, IT WILL BE OVERWRITTEN ON NEXT DIFF\n\n## CDK Express Pipeline Diff\n\n${markdown}\n\n---\nGit Hash: ${gitHash} | Generated At: ${now}`;\n\n  const response = await octokit.rest.pulls.get({\n    owner,\n    repo,\n    pull_number: pullNumber\n  });\n\n  const currentDescription = response.data.body || '';\n  const markerRegex = new RegExp(`${marker}[\\\\s\\\\S]*`, 'g');\n  const cleanedDescription = currentDescription.replace(markerRegex, '').trim();\n\n  let combinedContent = cleanedDescription + (cleanedDescription ? '\\n\\n' : '') + newContent;\n\n  if (combinedContent.length > MAX_DESCRIPTION_LENGTH) {\n    const availableSpace = MAX_DESCRIPTION_LENGTH - 100;\n    combinedContent =\n      combinedContent.substring(0, availableSpace) + '... TRUNCATED Look at GitHub Actions logs for full diff';\n  }\n\n  await octokit.rest.pulls.update({\n    owner,\n    repo,\n    pull_number: pullNumber,\n    body: combinedContent\n  });\n\n  return combinedContent;\n}\n", "/**\n * The entrypoint for the action. This file simply imports and runs the action's\n * main logic.\n */\nimport { run } from './main.js';\n\n/* istanbul ignore next */\nrun();\n"],
  "mappings": "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",
  "names": ["fs", "path"]
}
